// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/event"
	"github.com/koo-arch/adjusta-backend/ent/predicate"
	"github.com/koo-arch/adjusta-backend/ent/proposeddate"
)

// ProposedDateUpdate is the builder for updating ProposedDate entities.
type ProposedDateUpdate struct {
	config
	hooks    []Hook
	mutation *ProposedDateMutation
}

// Where appends a list predicates to the ProposedDateUpdate builder.
func (pdu *ProposedDateUpdate) Where(ps ...predicate.ProposedDate) *ProposedDateUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetStartTime sets the "start_time" field.
func (pdu *ProposedDateUpdate) SetStartTime(t time.Time) *ProposedDateUpdate {
	pdu.mutation.SetStartTime(t)
	return pdu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pdu *ProposedDateUpdate) SetNillableStartTime(t *time.Time) *ProposedDateUpdate {
	if t != nil {
		pdu.SetStartTime(*t)
	}
	return pdu
}

// SetEndTime sets the "end_time" field.
func (pdu *ProposedDateUpdate) SetEndTime(t time.Time) *ProposedDateUpdate {
	pdu.mutation.SetEndTime(t)
	return pdu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pdu *ProposedDateUpdate) SetNillableEndTime(t *time.Time) *ProposedDateUpdate {
	if t != nil {
		pdu.SetEndTime(*t)
	}
	return pdu
}

// SetPriority sets the "priority" field.
func (pdu *ProposedDateUpdate) SetPriority(i int) *ProposedDateUpdate {
	pdu.mutation.ResetPriority()
	pdu.mutation.SetPriority(i)
	return pdu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pdu *ProposedDateUpdate) SetNillablePriority(i *int) *ProposedDateUpdate {
	if i != nil {
		pdu.SetPriority(*i)
	}
	return pdu
}

// AddPriority adds i to the "priority" field.
func (pdu *ProposedDateUpdate) AddPriority(i int) *ProposedDateUpdate {
	pdu.mutation.AddPriority(i)
	return pdu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (pdu *ProposedDateUpdate) SetEventID(id uuid.UUID) *ProposedDateUpdate {
	pdu.mutation.SetEventID(id)
	return pdu
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (pdu *ProposedDateUpdate) SetNillableEventID(id *uuid.UUID) *ProposedDateUpdate {
	if id != nil {
		pdu = pdu.SetEventID(*id)
	}
	return pdu
}

// SetEvent sets the "event" edge to the Event entity.
func (pdu *ProposedDateUpdate) SetEvent(e *Event) *ProposedDateUpdate {
	return pdu.SetEventID(e.ID)
}

// Mutation returns the ProposedDateMutation object of the builder.
func (pdu *ProposedDateUpdate) Mutation() *ProposedDateMutation {
	return pdu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (pdu *ProposedDateUpdate) ClearEvent() *ProposedDateUpdate {
	pdu.mutation.ClearEvent()
	return pdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProposedDateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProposedDateUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProposedDateUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProposedDateUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pdu *ProposedDateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(proposeddate.Table, proposeddate.Columns, sqlgraph.NewFieldSpec(proposeddate.FieldID, field.TypeUUID))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.StartTime(); ok {
		_spec.SetField(proposeddate.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := pdu.mutation.EndTime(); ok {
		_spec.SetField(proposeddate.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := pdu.mutation.Priority(); ok {
		_spec.SetField(proposeddate.FieldPriority, field.TypeInt, value)
	}
	if value, ok := pdu.mutation.AddedPriority(); ok {
		_spec.AddField(proposeddate.FieldPriority, field.TypeInt, value)
	}
	if pdu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposeddate.EventTable,
			Columns: []string{proposeddate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposeddate.EventTable,
			Columns: []string{proposeddate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proposeddate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProposedDateUpdateOne is the builder for updating a single ProposedDate entity.
type ProposedDateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProposedDateMutation
}

// SetStartTime sets the "start_time" field.
func (pduo *ProposedDateUpdateOne) SetStartTime(t time.Time) *ProposedDateUpdateOne {
	pduo.mutation.SetStartTime(t)
	return pduo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pduo *ProposedDateUpdateOne) SetNillableStartTime(t *time.Time) *ProposedDateUpdateOne {
	if t != nil {
		pduo.SetStartTime(*t)
	}
	return pduo
}

// SetEndTime sets the "end_time" field.
func (pduo *ProposedDateUpdateOne) SetEndTime(t time.Time) *ProposedDateUpdateOne {
	pduo.mutation.SetEndTime(t)
	return pduo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pduo *ProposedDateUpdateOne) SetNillableEndTime(t *time.Time) *ProposedDateUpdateOne {
	if t != nil {
		pduo.SetEndTime(*t)
	}
	return pduo
}

// SetPriority sets the "priority" field.
func (pduo *ProposedDateUpdateOne) SetPriority(i int) *ProposedDateUpdateOne {
	pduo.mutation.ResetPriority()
	pduo.mutation.SetPriority(i)
	return pduo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pduo *ProposedDateUpdateOne) SetNillablePriority(i *int) *ProposedDateUpdateOne {
	if i != nil {
		pduo.SetPriority(*i)
	}
	return pduo
}

// AddPriority adds i to the "priority" field.
func (pduo *ProposedDateUpdateOne) AddPriority(i int) *ProposedDateUpdateOne {
	pduo.mutation.AddPriority(i)
	return pduo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (pduo *ProposedDateUpdateOne) SetEventID(id uuid.UUID) *ProposedDateUpdateOne {
	pduo.mutation.SetEventID(id)
	return pduo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (pduo *ProposedDateUpdateOne) SetNillableEventID(id *uuid.UUID) *ProposedDateUpdateOne {
	if id != nil {
		pduo = pduo.SetEventID(*id)
	}
	return pduo
}

// SetEvent sets the "event" edge to the Event entity.
func (pduo *ProposedDateUpdateOne) SetEvent(e *Event) *ProposedDateUpdateOne {
	return pduo.SetEventID(e.ID)
}

// Mutation returns the ProposedDateMutation object of the builder.
func (pduo *ProposedDateUpdateOne) Mutation() *ProposedDateMutation {
	return pduo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (pduo *ProposedDateUpdateOne) ClearEvent() *ProposedDateUpdateOne {
	pduo.mutation.ClearEvent()
	return pduo
}

// Where appends a list predicates to the ProposedDateUpdate builder.
func (pduo *ProposedDateUpdateOne) Where(ps ...predicate.ProposedDate) *ProposedDateUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProposedDateUpdateOne) Select(field string, fields ...string) *ProposedDateUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProposedDate entity.
func (pduo *ProposedDateUpdateOne) Save(ctx context.Context) (*ProposedDate, error) {
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProposedDateUpdateOne) SaveX(ctx context.Context) *ProposedDate {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProposedDateUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProposedDateUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pduo *ProposedDateUpdateOne) sqlSave(ctx context.Context) (_node *ProposedDate, err error) {
	_spec := sqlgraph.NewUpdateSpec(proposeddate.Table, proposeddate.Columns, sqlgraph.NewFieldSpec(proposeddate.FieldID, field.TypeUUID))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProposedDate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proposeddate.FieldID)
		for _, f := range fields {
			if !proposeddate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proposeddate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.StartTime(); ok {
		_spec.SetField(proposeddate.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := pduo.mutation.EndTime(); ok {
		_spec.SetField(proposeddate.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := pduo.mutation.Priority(); ok {
		_spec.SetField(proposeddate.FieldPriority, field.TypeInt, value)
	}
	if value, ok := pduo.mutation.AddedPriority(); ok {
		_spec.AddField(proposeddate.FieldPriority, field.TypeInt, value)
	}
	if pduo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposeddate.EventTable,
			Columns: []string{proposeddate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposeddate.EventTable,
			Columns: []string{proposeddate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProposedDate{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proposeddate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
