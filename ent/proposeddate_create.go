// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/event"
	"github.com/koo-arch/adjusta-backend/ent/proposeddate"
)

// ProposedDateCreate is the builder for creating a ProposedDate entity.
type ProposedDateCreate struct {
	config
	mutation *ProposedDateMutation
	hooks    []Hook
}

// SetGoogleEventID sets the "google_event_id" field.
func (pdc *ProposedDateCreate) SetGoogleEventID(s string) *ProposedDateCreate {
	pdc.mutation.SetGoogleEventID(s)
	return pdc
}

// SetNillableGoogleEventID sets the "google_event_id" field if the given value is not nil.
func (pdc *ProposedDateCreate) SetNillableGoogleEventID(s *string) *ProposedDateCreate {
	if s != nil {
		pdc.SetGoogleEventID(*s)
	}
	return pdc
}

// SetStartTime sets the "start_time" field.
func (pdc *ProposedDateCreate) SetStartTime(t time.Time) *ProposedDateCreate {
	pdc.mutation.SetStartTime(t)
	return pdc
}

// SetEndTime sets the "end_time" field.
func (pdc *ProposedDateCreate) SetEndTime(t time.Time) *ProposedDateCreate {
	pdc.mutation.SetEndTime(t)
	return pdc
}

// SetPriority sets the "priority" field.
func (pdc *ProposedDateCreate) SetPriority(i int) *ProposedDateCreate {
	pdc.mutation.SetPriority(i)
	return pdc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pdc *ProposedDateCreate) SetNillablePriority(i *int) *ProposedDateCreate {
	if i != nil {
		pdc.SetPriority(*i)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *ProposedDateCreate) SetID(u uuid.UUID) *ProposedDateCreate {
	pdc.mutation.SetID(u)
	return pdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdc *ProposedDateCreate) SetNillableID(u *uuid.UUID) *ProposedDateCreate {
	if u != nil {
		pdc.SetID(*u)
	}
	return pdc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (pdc *ProposedDateCreate) SetEventID(id uuid.UUID) *ProposedDateCreate {
	pdc.mutation.SetEventID(id)
	return pdc
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (pdc *ProposedDateCreate) SetNillableEventID(id *uuid.UUID) *ProposedDateCreate {
	if id != nil {
		pdc = pdc.SetEventID(*id)
	}
	return pdc
}

// SetEvent sets the "event" edge to the Event entity.
func (pdc *ProposedDateCreate) SetEvent(e *Event) *ProposedDateCreate {
	return pdc.SetEventID(e.ID)
}

// Mutation returns the ProposedDateMutation object of the builder.
func (pdc *ProposedDateCreate) Mutation() *ProposedDateMutation {
	return pdc.mutation
}

// Save creates the ProposedDate in the database.
func (pdc *ProposedDateCreate) Save(ctx context.Context) (*ProposedDate, error) {
	if err := pdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProposedDateCreate) SaveX(ctx context.Context) *ProposedDate {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProposedDateCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProposedDateCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *ProposedDateCreate) defaults() error {
	if _, ok := pdc.mutation.Priority(); !ok {
		v := proposeddate.DefaultPriority
		pdc.mutation.SetPriority(v)
	}
	if _, ok := pdc.mutation.ID(); !ok {
		if proposeddate.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized proposeddate.DefaultID (forgotten import ent/runtime?)")
		}
		v := proposeddate.DefaultID()
		pdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProposedDateCreate) check() error {
	if _, ok := pdc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "ProposedDate.start_time"`)}
	}
	if _, ok := pdc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "ProposedDate.end_time"`)}
	}
	if _, ok := pdc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "ProposedDate.priority"`)}
	}
	return nil
}

func (pdc *ProposedDateCreate) sqlSave(ctx context.Context) (*ProposedDate, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProposedDateCreate) createSpec() (*ProposedDate, *sqlgraph.CreateSpec) {
	var (
		_node = &ProposedDate{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(proposeddate.Table, sqlgraph.NewFieldSpec(proposeddate.FieldID, field.TypeUUID))
	)
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pdc.mutation.GoogleEventID(); ok {
		_spec.SetField(proposeddate.FieldGoogleEventID, field.TypeString, value)
		_node.GoogleEventID = value
	}
	if value, ok := pdc.mutation.StartTime(); ok {
		_spec.SetField(proposeddate.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := pdc.mutation.EndTime(); ok {
		_spec.SetField(proposeddate.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := pdc.mutation.Priority(); ok {
		_spec.SetField(proposeddate.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if nodes := pdc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposeddate.EventTable,
			Columns: []string{proposeddate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_proposed_dates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProposedDateCreateBulk is the builder for creating many ProposedDate entities in bulk.
type ProposedDateCreateBulk struct {
	config
	err      error
	builders []*ProposedDateCreate
}

// Save creates the ProposedDate entities in the database.
func (pdcb *ProposedDateCreateBulk) Save(ctx context.Context) ([]*ProposedDate, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProposedDate, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProposedDateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProposedDateCreateBulk) SaveX(ctx context.Context) []*ProposedDate {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProposedDateCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProposedDateCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
