// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldRefreshTokenExpiry holds the string denoting the refresh_token_expiry field in the database.
	FieldRefreshTokenExpiry = "refresh_token_expiry"
	// EdgeOauthToken holds the string denoting the oauth_token edge name in mutations.
	EdgeOauthToken = "oauth_token"
	// EdgeCalendars holds the string denoting the calendars edge name in mutations.
	EdgeCalendars = "calendars"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OauthTokenTable is the table that holds the oauth_token relation/edge.
	OauthTokenTable = "oauth_tokens"
	// OauthTokenInverseTable is the table name for the OAuthToken entity.
	// It exists in this package in order to avoid circular dependency with the "oauthtoken" package.
	OauthTokenInverseTable = "oauth_tokens"
	// OauthTokenColumn is the table column denoting the oauth_token relation/edge.
	OauthTokenColumn = "user_oauth_token"
	// CalendarsTable is the table that holds the calendars relation/edge.
	CalendarsTable = "calendars"
	// CalendarsInverseTable is the table name for the Calendar entity.
	// It exists in this package in order to avoid circular dependency with the "calendar" package.
	CalendarsInverseTable = "calendars"
	// CalendarsColumn is the table column denoting the calendars relation/edge.
	CalendarsColumn = "user_calendars"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldRefreshToken,
	FieldRefreshTokenExpiry,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/koo-arch/adjusta-backend/ent/runtime"
var (
	Hooks [1]ent.Hook
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByRefreshTokenExpiry orders the results by the refresh_token_expiry field.
func ByRefreshTokenExpiry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshTokenExpiry, opts...).ToFunc()
}

// ByOauthTokenField orders the results by oauth_token field.
func ByOauthTokenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthTokenStep(), sql.OrderByField(field, opts...))
	}
}

// ByCalendarsCount orders the results by calendars count.
func ByCalendarsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCalendarsStep(), opts...)
	}
}

// ByCalendars orders the results by calendars terms.
func ByCalendars(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCalendarsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOauthTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthTokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, OauthTokenTable, OauthTokenColumn),
	)
}
func newCalendarsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CalendarsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CalendarsTable, CalendarsColumn),
	)
}
