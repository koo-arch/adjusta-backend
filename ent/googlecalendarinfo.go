// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/googlecalendarinfo"
)

// GoogleCalendarInfo is the model entity for the GoogleCalendarInfo schema.
type GoogleCalendarInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GoogleCalendarID holds the value of the "google_calendar_id" field.
	GoogleCalendarID string `json:"google_calendar_id,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// IsPrimary holds the value of the "is_primary" field.
	IsPrimary bool `json:"is_primary,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoogleCalendarInfoQuery when eager-loading is set.
	Edges        GoogleCalendarInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GoogleCalendarInfoEdges holds the relations/edges for other nodes in the graph.
type GoogleCalendarInfoEdges struct {
	// Calendars holds the value of the calendars edge.
	Calendars []*Calendar `json:"calendars,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CalendarsOrErr returns the Calendars value or an error if the edge
// was not loaded in eager-loading.
func (e GoogleCalendarInfoEdges) CalendarsOrErr() ([]*Calendar, error) {
	if e.loadedTypes[0] {
		return e.Calendars, nil
	}
	return nil, &NotLoadedError{edge: "calendars"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoogleCalendarInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case googlecalendarinfo.FieldIsPrimary:
			values[i] = new(sql.NullBool)
		case googlecalendarinfo.FieldGoogleCalendarID, googlecalendarinfo.FieldSummary:
			values[i] = new(sql.NullString)
		case googlecalendarinfo.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoogleCalendarInfo fields.
func (gci *GoogleCalendarInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case googlecalendarinfo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gci.ID = *value
			}
		case googlecalendarinfo.FieldGoogleCalendarID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field google_calendar_id", values[i])
			} else if value.Valid {
				gci.GoogleCalendarID = value.String
			}
		case googlecalendarinfo.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				gci.Summary = value.String
			}
		case googlecalendarinfo.FieldIsPrimary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_primary", values[i])
			} else if value.Valid {
				gci.IsPrimary = value.Bool
			}
		default:
			gci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoogleCalendarInfo.
// This includes values selected through modifiers, order, etc.
func (gci *GoogleCalendarInfo) Value(name string) (ent.Value, error) {
	return gci.selectValues.Get(name)
}

// QueryCalendars queries the "calendars" edge of the GoogleCalendarInfo entity.
func (gci *GoogleCalendarInfo) QueryCalendars() *CalendarQuery {
	return NewGoogleCalendarInfoClient(gci.config).QueryCalendars(gci)
}

// Update returns a builder for updating this GoogleCalendarInfo.
// Note that you need to call GoogleCalendarInfo.Unwrap() before calling this method if this GoogleCalendarInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (gci *GoogleCalendarInfo) Update() *GoogleCalendarInfoUpdateOne {
	return NewGoogleCalendarInfoClient(gci.config).UpdateOne(gci)
}

// Unwrap unwraps the GoogleCalendarInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gci *GoogleCalendarInfo) Unwrap() *GoogleCalendarInfo {
	_tx, ok := gci.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoogleCalendarInfo is not a transactional entity")
	}
	gci.config.driver = _tx.drv
	return gci
}

// String implements the fmt.Stringer.
func (gci *GoogleCalendarInfo) String() string {
	var builder strings.Builder
	builder.WriteString("GoogleCalendarInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gci.ID))
	builder.WriteString("google_calendar_id=")
	builder.WriteString(gci.GoogleCalendarID)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(gci.Summary)
	builder.WriteString(", ")
	builder.WriteString("is_primary=")
	builder.WriteString(fmt.Sprintf("%v", gci.IsPrimary))
	builder.WriteByte(')')
	return builder.String()
}

// GoogleCalendarInfos is a parsable slice of GoogleCalendarInfo.
type GoogleCalendarInfos []*GoogleCalendarInfo
