// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/oauthtoken"
	"github.com/koo-arch/adjusta-backend/ent/user"
)

// OAuthToken is the model entity for the OAuthToken schema.
type OAuthToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"-"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"-"`
	// Expiry holds the value of the "expiry" field.
	Expiry time.Time `json:"expiry,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthTokenQuery when eager-loading is set.
	Edges            OAuthTokenEdges `json:"edges"`
	user_oauth_token *uuid.UUID
	selectValues     sql.SelectValues
}

// OAuthTokenEdges holds the relations/edges for other nodes in the graph.
type OAuthTokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthTokenEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthtoken.FieldAccessToken, oauthtoken.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case oauthtoken.FieldCreatedAt, oauthtoken.FieldUpdatedAt, oauthtoken.FieldDeletedAt, oauthtoken.FieldExpiry:
			values[i] = new(sql.NullTime)
		case oauthtoken.FieldID:
			values[i] = new(uuid.UUID)
		case oauthtoken.ForeignKeys[0]: // user_oauth_token
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthToken fields.
func (ot *OAuthToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthtoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ot.ID = *value
			}
		case oauthtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ot.CreatedAt = value.Time
			}
		case oauthtoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ot.UpdatedAt = value.Time
			}
		case oauthtoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ot.DeletedAt = new(time.Time)
				*ot.DeletedAt = value.Time
			}
		case oauthtoken.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				ot.AccessToken = value.String
			}
		case oauthtoken.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				ot.RefreshToken = value.String
			}
		case oauthtoken.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				ot.Expiry = value.Time
			}
		case oauthtoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_oauth_token", values[i])
			} else if value.Valid {
				ot.user_oauth_token = new(uuid.UUID)
				*ot.user_oauth_token = *value.S.(*uuid.UUID)
			}
		default:
			ot.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthToken.
// This includes values selected through modifiers, order, etc.
func (ot *OAuthToken) Value(name string) (ent.Value, error) {
	return ot.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the OAuthToken entity.
func (ot *OAuthToken) QueryUser() *UserQuery {
	return NewOAuthTokenClient(ot.config).QueryUser(ot)
}

// Update returns a builder for updating this OAuthToken.
// Note that you need to call OAuthToken.Unwrap() before calling this method if this OAuthToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (ot *OAuthToken) Update() *OAuthTokenUpdateOne {
	return NewOAuthTokenClient(ot.config).UpdateOne(ot)
}

// Unwrap unwraps the OAuthToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ot *OAuthToken) Unwrap() *OAuthToken {
	_tx, ok := ot.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthToken is not a transactional entity")
	}
	ot.config.driver = _tx.drv
	return ot
}

// String implements the fmt.Stringer.
func (ot *OAuthToken) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ot.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ot.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ot.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ot.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("access_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("refresh_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("expiry=")
	builder.WriteString(ot.Expiry.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OAuthTokens is a parsable slice of OAuthToken.
type OAuthTokens []*OAuthToken
