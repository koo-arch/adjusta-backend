// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/adjusta-backend/ent/googlecalendarinfo"
	"github.com/koo-arch/adjusta-backend/ent/predicate"
)

// GoogleCalendarInfoDelete is the builder for deleting a GoogleCalendarInfo entity.
type GoogleCalendarInfoDelete struct {
	config
	hooks    []Hook
	mutation *GoogleCalendarInfoMutation
}

// Where appends a list predicates to the GoogleCalendarInfoDelete builder.
func (gcid *GoogleCalendarInfoDelete) Where(ps ...predicate.GoogleCalendarInfo) *GoogleCalendarInfoDelete {
	gcid.mutation.Where(ps...)
	return gcid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gcid *GoogleCalendarInfoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gcid.sqlExec, gcid.mutation, gcid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gcid *GoogleCalendarInfoDelete) ExecX(ctx context.Context) int {
	n, err := gcid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gcid *GoogleCalendarInfoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(googlecalendarinfo.Table, sqlgraph.NewFieldSpec(googlecalendarinfo.FieldID, field.TypeUUID))
	if ps := gcid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gcid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gcid.mutation.done = true
	return affected, err
}

// GoogleCalendarInfoDeleteOne is the builder for deleting a single GoogleCalendarInfo entity.
type GoogleCalendarInfoDeleteOne struct {
	gcid *GoogleCalendarInfoDelete
}

// Where appends a list predicates to the GoogleCalendarInfoDelete builder.
func (gcido *GoogleCalendarInfoDeleteOne) Where(ps ...predicate.GoogleCalendarInfo) *GoogleCalendarInfoDeleteOne {
	gcido.gcid.mutation.Where(ps...)
	return gcido
}

// Exec executes the deletion query.
func (gcido *GoogleCalendarInfoDeleteOne) Exec(ctx context.Context) error {
	n, err := gcido.gcid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{googlecalendarinfo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gcido *GoogleCalendarInfoDeleteOne) ExecX(ctx context.Context) {
	if err := gcido.Exec(ctx); err != nil {
		panic(err)
	}
}
