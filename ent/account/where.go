// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/koo-arch/adjusta-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEmail, v))
}

// GoogleID applies equality check predicate on the "google_id" field. It's identical to GoogleIDEQ.
func GoogleID(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldGoogleID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRefreshToken, v))
}

// AccessTokenExpiry applies equality check predicate on the "access_token_expiry" field. It's identical to AccessTokenExpiryEQ.
func AccessTokenExpiry(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessTokenExpiry, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldEmail, v))
}

// GoogleIDEQ applies the EQ predicate on the "google_id" field.
func GoogleIDEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldGoogleID, v))
}

// GoogleIDNEQ applies the NEQ predicate on the "google_id" field.
func GoogleIDNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldGoogleID, v))
}

// GoogleIDIn applies the In predicate on the "google_id" field.
func GoogleIDIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldGoogleID, vs...))
}

// GoogleIDNotIn applies the NotIn predicate on the "google_id" field.
func GoogleIDNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldGoogleID, vs...))
}

// GoogleIDGT applies the GT predicate on the "google_id" field.
func GoogleIDGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldGoogleID, v))
}

// GoogleIDGTE applies the GTE predicate on the "google_id" field.
func GoogleIDGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldGoogleID, v))
}

// GoogleIDLT applies the LT predicate on the "google_id" field.
func GoogleIDLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldGoogleID, v))
}

// GoogleIDLTE applies the LTE predicate on the "google_id" field.
func GoogleIDLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldGoogleID, v))
}

// GoogleIDContains applies the Contains predicate on the "google_id" field.
func GoogleIDContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldGoogleID, v))
}

// GoogleIDHasPrefix applies the HasPrefix predicate on the "google_id" field.
func GoogleIDHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldGoogleID, v))
}

// GoogleIDHasSuffix applies the HasSuffix predicate on the "google_id" field.
func GoogleIDHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldGoogleID, v))
}

// GoogleIDEqualFold applies the EqualFold predicate on the "google_id" field.
func GoogleIDEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldGoogleID, v))
}

// GoogleIDContainsFold applies the ContainsFold predicate on the "google_id" field.
func GoogleIDContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldGoogleID, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldRefreshToken, v))
}

// AccessTokenExpiryEQ applies the EQ predicate on the "access_token_expiry" field.
func AccessTokenExpiryEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryNEQ applies the NEQ predicate on the "access_token_expiry" field.
func AccessTokenExpiryNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryIn applies the In predicate on the "access_token_expiry" field.
func AccessTokenExpiryIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAccessTokenExpiry, vs...))
}

// AccessTokenExpiryNotIn applies the NotIn predicate on the "access_token_expiry" field.
func AccessTokenExpiryNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAccessTokenExpiry, vs...))
}

// AccessTokenExpiryGT applies the GT predicate on the "access_token_expiry" field.
func AccessTokenExpiryGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryGTE applies the GTE predicate on the "access_token_expiry" field.
func AccessTokenExpiryGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryLT applies the LT predicate on the "access_token_expiry" field.
func AccessTokenExpiryLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryLTE applies the LTE predicate on the "access_token_expiry" field.
func AccessTokenExpiryLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAccessTokenExpiry, v))
}

// AccessTokenExpiryIsNil applies the IsNil predicate on the "access_token_expiry" field.
func AccessTokenExpiryIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldAccessTokenExpiry))
}

// AccessTokenExpiryNotNil applies the NotNil predicate on the "access_token_expiry" field.
func AccessTokenExpiryNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldAccessTokenExpiry))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
