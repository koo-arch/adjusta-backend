// Code generated by ent, DO NOT EDIT.

package googlecalendarinfo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldLTE(FieldID, id))
}

// GoogleCalendarID applies equality check predicate on the "google_calendar_id" field. It's identical to GoogleCalendarIDEQ.
func GoogleCalendarID(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEQ(FieldGoogleCalendarID, v))
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEQ(FieldSummary, v))
}

// IsPrimary applies equality check predicate on the "is_primary" field. It's identical to IsPrimaryEQ.
func IsPrimary(v bool) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEQ(FieldIsPrimary, v))
}

// GoogleCalendarIDEQ applies the EQ predicate on the "google_calendar_id" field.
func GoogleCalendarIDEQ(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEQ(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDNEQ applies the NEQ predicate on the "google_calendar_id" field.
func GoogleCalendarIDNEQ(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldNEQ(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDIn applies the In predicate on the "google_calendar_id" field.
func GoogleCalendarIDIn(vs ...string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldIn(FieldGoogleCalendarID, vs...))
}

// GoogleCalendarIDNotIn applies the NotIn predicate on the "google_calendar_id" field.
func GoogleCalendarIDNotIn(vs ...string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldNotIn(FieldGoogleCalendarID, vs...))
}

// GoogleCalendarIDGT applies the GT predicate on the "google_calendar_id" field.
func GoogleCalendarIDGT(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldGT(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDGTE applies the GTE predicate on the "google_calendar_id" field.
func GoogleCalendarIDGTE(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldGTE(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDLT applies the LT predicate on the "google_calendar_id" field.
func GoogleCalendarIDLT(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldLT(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDLTE applies the LTE predicate on the "google_calendar_id" field.
func GoogleCalendarIDLTE(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldLTE(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDContains applies the Contains predicate on the "google_calendar_id" field.
func GoogleCalendarIDContains(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldContains(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDHasPrefix applies the HasPrefix predicate on the "google_calendar_id" field.
func GoogleCalendarIDHasPrefix(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldHasPrefix(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDHasSuffix applies the HasSuffix predicate on the "google_calendar_id" field.
func GoogleCalendarIDHasSuffix(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldHasSuffix(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDEqualFold applies the EqualFold predicate on the "google_calendar_id" field.
func GoogleCalendarIDEqualFold(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEqualFold(FieldGoogleCalendarID, v))
}

// GoogleCalendarIDContainsFold applies the ContainsFold predicate on the "google_calendar_id" field.
func GoogleCalendarIDContainsFold(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldContainsFold(FieldGoogleCalendarID, v))
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEQ(FieldSummary, v))
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldNEQ(FieldSummary, v))
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldIn(FieldSummary, vs...))
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldNotIn(FieldSummary, vs...))
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldGT(FieldSummary, v))
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldGTE(FieldSummary, v))
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldLT(FieldSummary, v))
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldLTE(FieldSummary, v))
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldContains(FieldSummary, v))
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldHasPrefix(FieldSummary, v))
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldHasSuffix(FieldSummary, v))
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldIsNull(FieldSummary))
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldNotNull(FieldSummary))
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEqualFold(FieldSummary, v))
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldContainsFold(FieldSummary, v))
}

// IsPrimaryEQ applies the EQ predicate on the "is_primary" field.
func IsPrimaryEQ(v bool) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldEQ(FieldIsPrimary, v))
}

// IsPrimaryNEQ applies the NEQ predicate on the "is_primary" field.
func IsPrimaryNEQ(v bool) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.FieldNEQ(FieldIsPrimary, v))
}

// HasCalendars applies the HasEdge predicate on the "calendars" edge.
func HasCalendars() predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CalendarsTable, CalendarsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCalendarsWith applies the HasEdge predicate on the "calendars" edge with a given conditions (other predicates).
func HasCalendarsWith(preds ...predicate.Calendar) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(func(s *sql.Selector) {
		step := newCalendarsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoogleCalendarInfo) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoogleCalendarInfo) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoogleCalendarInfo) predicate.GoogleCalendarInfo {
	return predicate.GoogleCalendarInfo(sql.NotPredicates(p))
}
