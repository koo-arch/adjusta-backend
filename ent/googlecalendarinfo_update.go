// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/calendar"
	"github.com/koo-arch/adjusta-backend/ent/googlecalendarinfo"
	"github.com/koo-arch/adjusta-backend/ent/predicate"
)

// GoogleCalendarInfoUpdate is the builder for updating GoogleCalendarInfo entities.
type GoogleCalendarInfoUpdate struct {
	config
	hooks    []Hook
	mutation *GoogleCalendarInfoMutation
}

// Where appends a list predicates to the GoogleCalendarInfoUpdate builder.
func (gciu *GoogleCalendarInfoUpdate) Where(ps ...predicate.GoogleCalendarInfo) *GoogleCalendarInfoUpdate {
	gciu.mutation.Where(ps...)
	return gciu
}

// SetGoogleCalendarID sets the "google_calendar_id" field.
func (gciu *GoogleCalendarInfoUpdate) SetGoogleCalendarID(s string) *GoogleCalendarInfoUpdate {
	gciu.mutation.SetGoogleCalendarID(s)
	return gciu
}

// SetNillableGoogleCalendarID sets the "google_calendar_id" field if the given value is not nil.
func (gciu *GoogleCalendarInfoUpdate) SetNillableGoogleCalendarID(s *string) *GoogleCalendarInfoUpdate {
	if s != nil {
		gciu.SetGoogleCalendarID(*s)
	}
	return gciu
}

// SetSummary sets the "summary" field.
func (gciu *GoogleCalendarInfoUpdate) SetSummary(s string) *GoogleCalendarInfoUpdate {
	gciu.mutation.SetSummary(s)
	return gciu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (gciu *GoogleCalendarInfoUpdate) SetNillableSummary(s *string) *GoogleCalendarInfoUpdate {
	if s != nil {
		gciu.SetSummary(*s)
	}
	return gciu
}

// ClearSummary clears the value of the "summary" field.
func (gciu *GoogleCalendarInfoUpdate) ClearSummary() *GoogleCalendarInfoUpdate {
	gciu.mutation.ClearSummary()
	return gciu
}

// SetIsPrimary sets the "is_primary" field.
func (gciu *GoogleCalendarInfoUpdate) SetIsPrimary(b bool) *GoogleCalendarInfoUpdate {
	gciu.mutation.SetIsPrimary(b)
	return gciu
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (gciu *GoogleCalendarInfoUpdate) SetNillableIsPrimary(b *bool) *GoogleCalendarInfoUpdate {
	if b != nil {
		gciu.SetIsPrimary(*b)
	}
	return gciu
}

// AddCalendarIDs adds the "calendars" edge to the Calendar entity by IDs.
func (gciu *GoogleCalendarInfoUpdate) AddCalendarIDs(ids ...uuid.UUID) *GoogleCalendarInfoUpdate {
	gciu.mutation.AddCalendarIDs(ids...)
	return gciu
}

// AddCalendars adds the "calendars" edges to the Calendar entity.
func (gciu *GoogleCalendarInfoUpdate) AddCalendars(c ...*Calendar) *GoogleCalendarInfoUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gciu.AddCalendarIDs(ids...)
}

// Mutation returns the GoogleCalendarInfoMutation object of the builder.
func (gciu *GoogleCalendarInfoUpdate) Mutation() *GoogleCalendarInfoMutation {
	return gciu.mutation
}

// ClearCalendars clears all "calendars" edges to the Calendar entity.
func (gciu *GoogleCalendarInfoUpdate) ClearCalendars() *GoogleCalendarInfoUpdate {
	gciu.mutation.ClearCalendars()
	return gciu
}

// RemoveCalendarIDs removes the "calendars" edge to Calendar entities by IDs.
func (gciu *GoogleCalendarInfoUpdate) RemoveCalendarIDs(ids ...uuid.UUID) *GoogleCalendarInfoUpdate {
	gciu.mutation.RemoveCalendarIDs(ids...)
	return gciu
}

// RemoveCalendars removes "calendars" edges to Calendar entities.
func (gciu *GoogleCalendarInfoUpdate) RemoveCalendars(c ...*Calendar) *GoogleCalendarInfoUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gciu.RemoveCalendarIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gciu *GoogleCalendarInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gciu.sqlSave, gciu.mutation, gciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gciu *GoogleCalendarInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := gciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gciu *GoogleCalendarInfoUpdate) Exec(ctx context.Context) error {
	_, err := gciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gciu *GoogleCalendarInfoUpdate) ExecX(ctx context.Context) {
	if err := gciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gciu *GoogleCalendarInfoUpdate) check() error {
	if v, ok := gciu.mutation.GoogleCalendarID(); ok {
		if err := googlecalendarinfo.GoogleCalendarIDValidator(v); err != nil {
			return &ValidationError{Name: "google_calendar_id", err: fmt.Errorf(`ent: validator failed for field "GoogleCalendarInfo.google_calendar_id": %w`, err)}
		}
	}
	return nil
}

func (gciu *GoogleCalendarInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gciu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(googlecalendarinfo.Table, googlecalendarinfo.Columns, sqlgraph.NewFieldSpec(googlecalendarinfo.FieldID, field.TypeUUID))
	if ps := gciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gciu.mutation.GoogleCalendarID(); ok {
		_spec.SetField(googlecalendarinfo.FieldGoogleCalendarID, field.TypeString, value)
	}
	if value, ok := gciu.mutation.Summary(); ok {
		_spec.SetField(googlecalendarinfo.FieldSummary, field.TypeString, value)
	}
	if gciu.mutation.SummaryCleared() {
		_spec.ClearField(googlecalendarinfo.FieldSummary, field.TypeString)
	}
	if value, ok := gciu.mutation.IsPrimary(); ok {
		_spec.SetField(googlecalendarinfo.FieldIsPrimary, field.TypeBool, value)
	}
	if gciu.mutation.CalendarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   googlecalendarinfo.CalendarsTable,
			Columns: googlecalendarinfo.CalendarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calendar.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gciu.mutation.RemovedCalendarsIDs(); len(nodes) > 0 && !gciu.mutation.CalendarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   googlecalendarinfo.CalendarsTable,
			Columns: googlecalendarinfo.CalendarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calendar.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gciu.mutation.CalendarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   googlecalendarinfo.CalendarsTable,
			Columns: googlecalendarinfo.CalendarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calendar.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googlecalendarinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gciu.mutation.done = true
	return n, nil
}

// GoogleCalendarInfoUpdateOne is the builder for updating a single GoogleCalendarInfo entity.
type GoogleCalendarInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoogleCalendarInfoMutation
}

// SetGoogleCalendarID sets the "google_calendar_id" field.
func (gciuo *GoogleCalendarInfoUpdateOne) SetGoogleCalendarID(s string) *GoogleCalendarInfoUpdateOne {
	gciuo.mutation.SetGoogleCalendarID(s)
	return gciuo
}

// SetNillableGoogleCalendarID sets the "google_calendar_id" field if the given value is not nil.
func (gciuo *GoogleCalendarInfoUpdateOne) SetNillableGoogleCalendarID(s *string) *GoogleCalendarInfoUpdateOne {
	if s != nil {
		gciuo.SetGoogleCalendarID(*s)
	}
	return gciuo
}

// SetSummary sets the "summary" field.
func (gciuo *GoogleCalendarInfoUpdateOne) SetSummary(s string) *GoogleCalendarInfoUpdateOne {
	gciuo.mutation.SetSummary(s)
	return gciuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (gciuo *GoogleCalendarInfoUpdateOne) SetNillableSummary(s *string) *GoogleCalendarInfoUpdateOne {
	if s != nil {
		gciuo.SetSummary(*s)
	}
	return gciuo
}

// ClearSummary clears the value of the "summary" field.
func (gciuo *GoogleCalendarInfoUpdateOne) ClearSummary() *GoogleCalendarInfoUpdateOne {
	gciuo.mutation.ClearSummary()
	return gciuo
}

// SetIsPrimary sets the "is_primary" field.
func (gciuo *GoogleCalendarInfoUpdateOne) SetIsPrimary(b bool) *GoogleCalendarInfoUpdateOne {
	gciuo.mutation.SetIsPrimary(b)
	return gciuo
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (gciuo *GoogleCalendarInfoUpdateOne) SetNillableIsPrimary(b *bool) *GoogleCalendarInfoUpdateOne {
	if b != nil {
		gciuo.SetIsPrimary(*b)
	}
	return gciuo
}

// AddCalendarIDs adds the "calendars" edge to the Calendar entity by IDs.
func (gciuo *GoogleCalendarInfoUpdateOne) AddCalendarIDs(ids ...uuid.UUID) *GoogleCalendarInfoUpdateOne {
	gciuo.mutation.AddCalendarIDs(ids...)
	return gciuo
}

// AddCalendars adds the "calendars" edges to the Calendar entity.
func (gciuo *GoogleCalendarInfoUpdateOne) AddCalendars(c ...*Calendar) *GoogleCalendarInfoUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gciuo.AddCalendarIDs(ids...)
}

// Mutation returns the GoogleCalendarInfoMutation object of the builder.
func (gciuo *GoogleCalendarInfoUpdateOne) Mutation() *GoogleCalendarInfoMutation {
	return gciuo.mutation
}

// ClearCalendars clears all "calendars" edges to the Calendar entity.
func (gciuo *GoogleCalendarInfoUpdateOne) ClearCalendars() *GoogleCalendarInfoUpdateOne {
	gciuo.mutation.ClearCalendars()
	return gciuo
}

// RemoveCalendarIDs removes the "calendars" edge to Calendar entities by IDs.
func (gciuo *GoogleCalendarInfoUpdateOne) RemoveCalendarIDs(ids ...uuid.UUID) *GoogleCalendarInfoUpdateOne {
	gciuo.mutation.RemoveCalendarIDs(ids...)
	return gciuo
}

// RemoveCalendars removes "calendars" edges to Calendar entities.
func (gciuo *GoogleCalendarInfoUpdateOne) RemoveCalendars(c ...*Calendar) *GoogleCalendarInfoUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gciuo.RemoveCalendarIDs(ids...)
}

// Where appends a list predicates to the GoogleCalendarInfoUpdate builder.
func (gciuo *GoogleCalendarInfoUpdateOne) Where(ps ...predicate.GoogleCalendarInfo) *GoogleCalendarInfoUpdateOne {
	gciuo.mutation.Where(ps...)
	return gciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gciuo *GoogleCalendarInfoUpdateOne) Select(field string, fields ...string) *GoogleCalendarInfoUpdateOne {
	gciuo.fields = append([]string{field}, fields...)
	return gciuo
}

// Save executes the query and returns the updated GoogleCalendarInfo entity.
func (gciuo *GoogleCalendarInfoUpdateOne) Save(ctx context.Context) (*GoogleCalendarInfo, error) {
	return withHooks(ctx, gciuo.sqlSave, gciuo.mutation, gciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gciuo *GoogleCalendarInfoUpdateOne) SaveX(ctx context.Context) *GoogleCalendarInfo {
	node, err := gciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gciuo *GoogleCalendarInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := gciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gciuo *GoogleCalendarInfoUpdateOne) ExecX(ctx context.Context) {
	if err := gciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gciuo *GoogleCalendarInfoUpdateOne) check() error {
	if v, ok := gciuo.mutation.GoogleCalendarID(); ok {
		if err := googlecalendarinfo.GoogleCalendarIDValidator(v); err != nil {
			return &ValidationError{Name: "google_calendar_id", err: fmt.Errorf(`ent: validator failed for field "GoogleCalendarInfo.google_calendar_id": %w`, err)}
		}
	}
	return nil
}

func (gciuo *GoogleCalendarInfoUpdateOne) sqlSave(ctx context.Context) (_node *GoogleCalendarInfo, err error) {
	if err := gciuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(googlecalendarinfo.Table, googlecalendarinfo.Columns, sqlgraph.NewFieldSpec(googlecalendarinfo.FieldID, field.TypeUUID))
	id, ok := gciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoogleCalendarInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, googlecalendarinfo.FieldID)
		for _, f := range fields {
			if !googlecalendarinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != googlecalendarinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gciuo.mutation.GoogleCalendarID(); ok {
		_spec.SetField(googlecalendarinfo.FieldGoogleCalendarID, field.TypeString, value)
	}
	if value, ok := gciuo.mutation.Summary(); ok {
		_spec.SetField(googlecalendarinfo.FieldSummary, field.TypeString, value)
	}
	if gciuo.mutation.SummaryCleared() {
		_spec.ClearField(googlecalendarinfo.FieldSummary, field.TypeString)
	}
	if value, ok := gciuo.mutation.IsPrimary(); ok {
		_spec.SetField(googlecalendarinfo.FieldIsPrimary, field.TypeBool, value)
	}
	if gciuo.mutation.CalendarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   googlecalendarinfo.CalendarsTable,
			Columns: googlecalendarinfo.CalendarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calendar.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gciuo.mutation.RemovedCalendarsIDs(); len(nodes) > 0 && !gciuo.mutation.CalendarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   googlecalendarinfo.CalendarsTable,
			Columns: googlecalendarinfo.CalendarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calendar.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gciuo.mutation.CalendarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   googlecalendarinfo.CalendarsTable,
			Columns: googlecalendarinfo.CalendarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calendar.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GoogleCalendarInfo{config: gciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googlecalendarinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gciuo.mutation.done = true
	return _node, nil
}
