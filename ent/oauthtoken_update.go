// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/oauthtoken"
	"github.com/koo-arch/adjusta-backend/ent/predicate"
	"github.com/koo-arch/adjusta-backend/ent/user"
)

// OAuthTokenUpdate is the builder for updating OAuthToken entities.
type OAuthTokenUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthTokenMutation
}

// Where appends a list predicates to the OAuthTokenUpdate builder.
func (otu *OAuthTokenUpdate) Where(ps ...predicate.OAuthToken) *OAuthTokenUpdate {
	otu.mutation.Where(ps...)
	return otu
}

// SetAccessToken sets the "access_token" field.
func (otu *OAuthTokenUpdate) SetAccessToken(s string) *OAuthTokenUpdate {
	otu.mutation.SetAccessToken(s)
	return otu
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableAccessToken(s *string) *OAuthTokenUpdate {
	if s != nil {
		otu.SetAccessToken(*s)
	}
	return otu
}

// ClearAccessToken clears the value of the "access_token" field.
func (otu *OAuthTokenUpdate) ClearAccessToken() *OAuthTokenUpdate {
	otu.mutation.ClearAccessToken()
	return otu
}

// SetRefreshToken sets the "refresh_token" field.
func (otu *OAuthTokenUpdate) SetRefreshToken(s string) *OAuthTokenUpdate {
	otu.mutation.SetRefreshToken(s)
	return otu
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableRefreshToken(s *string) *OAuthTokenUpdate {
	if s != nil {
		otu.SetRefreshToken(*s)
	}
	return otu
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (otu *OAuthTokenUpdate) ClearRefreshToken() *OAuthTokenUpdate {
	otu.mutation.ClearRefreshToken()
	return otu
}

// SetExpiry sets the "expiry" field.
func (otu *OAuthTokenUpdate) SetExpiry(t time.Time) *OAuthTokenUpdate {
	otu.mutation.SetExpiry(t)
	return otu
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableExpiry(t *time.Time) *OAuthTokenUpdate {
	if t != nil {
		otu.SetExpiry(*t)
	}
	return otu
}

// ClearExpiry clears the value of the "expiry" field.
func (otu *OAuthTokenUpdate) ClearExpiry() *OAuthTokenUpdate {
	otu.mutation.ClearExpiry()
	return otu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (otu *OAuthTokenUpdate) SetUserID(id uuid.UUID) *OAuthTokenUpdate {
	otu.mutation.SetUserID(id)
	return otu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableUserID(id *uuid.UUID) *OAuthTokenUpdate {
	if id != nil {
		otu = otu.SetUserID(*id)
	}
	return otu
}

// SetUser sets the "user" edge to the User entity.
func (otu *OAuthTokenUpdate) SetUser(u *User) *OAuthTokenUpdate {
	return otu.SetUserID(u.ID)
}

// Mutation returns the OAuthTokenMutation object of the builder.
func (otu *OAuthTokenUpdate) Mutation() *OAuthTokenMutation {
	return otu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (otu *OAuthTokenUpdate) ClearUser() *OAuthTokenUpdate {
	otu.mutation.ClearUser()
	return otu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (otu *OAuthTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, otu.sqlSave, otu.mutation, otu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (otu *OAuthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := otu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otu *OAuthTokenUpdate) Exec(ctx context.Context) error {
	_, err := otu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otu *OAuthTokenUpdate) ExecX(ctx context.Context) {
	if err := otu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (otu *OAuthTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthtoken.Table, oauthtoken.Columns, sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUUID))
	if ps := otu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otu.mutation.AccessToken(); ok {
		_spec.SetField(oauthtoken.FieldAccessToken, field.TypeString, value)
	}
	if otu.mutation.AccessTokenCleared() {
		_spec.ClearField(oauthtoken.FieldAccessToken, field.TypeString)
	}
	if value, ok := otu.mutation.RefreshToken(); ok {
		_spec.SetField(oauthtoken.FieldRefreshToken, field.TypeString, value)
	}
	if otu.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthtoken.FieldRefreshToken, field.TypeString)
	}
	if value, ok := otu.mutation.Expiry(); ok {
		_spec.SetField(oauthtoken.FieldExpiry, field.TypeTime, value)
	}
	if otu.mutation.ExpiryCleared() {
		_spec.ClearField(oauthtoken.FieldExpiry, field.TypeTime)
	}
	if otu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, otu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	otu.mutation.done = true
	return n, nil
}

// OAuthTokenUpdateOne is the builder for updating a single OAuthToken entity.
type OAuthTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthTokenMutation
}

// SetAccessToken sets the "access_token" field.
func (otuo *OAuthTokenUpdateOne) SetAccessToken(s string) *OAuthTokenUpdateOne {
	otuo.mutation.SetAccessToken(s)
	return otuo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableAccessToken(s *string) *OAuthTokenUpdateOne {
	if s != nil {
		otuo.SetAccessToken(*s)
	}
	return otuo
}

// ClearAccessToken clears the value of the "access_token" field.
func (otuo *OAuthTokenUpdateOne) ClearAccessToken() *OAuthTokenUpdateOne {
	otuo.mutation.ClearAccessToken()
	return otuo
}

// SetRefreshToken sets the "refresh_token" field.
func (otuo *OAuthTokenUpdateOne) SetRefreshToken(s string) *OAuthTokenUpdateOne {
	otuo.mutation.SetRefreshToken(s)
	return otuo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableRefreshToken(s *string) *OAuthTokenUpdateOne {
	if s != nil {
		otuo.SetRefreshToken(*s)
	}
	return otuo
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (otuo *OAuthTokenUpdateOne) ClearRefreshToken() *OAuthTokenUpdateOne {
	otuo.mutation.ClearRefreshToken()
	return otuo
}

// SetExpiry sets the "expiry" field.
func (otuo *OAuthTokenUpdateOne) SetExpiry(t time.Time) *OAuthTokenUpdateOne {
	otuo.mutation.SetExpiry(t)
	return otuo
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableExpiry(t *time.Time) *OAuthTokenUpdateOne {
	if t != nil {
		otuo.SetExpiry(*t)
	}
	return otuo
}

// ClearExpiry clears the value of the "expiry" field.
func (otuo *OAuthTokenUpdateOne) ClearExpiry() *OAuthTokenUpdateOne {
	otuo.mutation.ClearExpiry()
	return otuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (otuo *OAuthTokenUpdateOne) SetUserID(id uuid.UUID) *OAuthTokenUpdateOne {
	otuo.mutation.SetUserID(id)
	return otuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableUserID(id *uuid.UUID) *OAuthTokenUpdateOne {
	if id != nil {
		otuo = otuo.SetUserID(*id)
	}
	return otuo
}

// SetUser sets the "user" edge to the User entity.
func (otuo *OAuthTokenUpdateOne) SetUser(u *User) *OAuthTokenUpdateOne {
	return otuo.SetUserID(u.ID)
}

// Mutation returns the OAuthTokenMutation object of the builder.
func (otuo *OAuthTokenUpdateOne) Mutation() *OAuthTokenMutation {
	return otuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (otuo *OAuthTokenUpdateOne) ClearUser() *OAuthTokenUpdateOne {
	otuo.mutation.ClearUser()
	return otuo
}

// Where appends a list predicates to the OAuthTokenUpdate builder.
func (otuo *OAuthTokenUpdateOne) Where(ps ...predicate.OAuthToken) *OAuthTokenUpdateOne {
	otuo.mutation.Where(ps...)
	return otuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (otuo *OAuthTokenUpdateOne) Select(field string, fields ...string) *OAuthTokenUpdateOne {
	otuo.fields = append([]string{field}, fields...)
	return otuo
}

// Save executes the query and returns the updated OAuthToken entity.
func (otuo *OAuthTokenUpdateOne) Save(ctx context.Context) (*OAuthToken, error) {
	return withHooks(ctx, otuo.sqlSave, otuo.mutation, otuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (otuo *OAuthTokenUpdateOne) SaveX(ctx context.Context) *OAuthToken {
	node, err := otuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (otuo *OAuthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := otuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otuo *OAuthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := otuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (otuo *OAuthTokenUpdateOne) sqlSave(ctx context.Context) (_node *OAuthToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthtoken.Table, oauthtoken.Columns, sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeUUID))
	id, ok := otuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := otuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthtoken.FieldID)
		for _, f := range fields {
			if !oauthtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := otuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otuo.mutation.AccessToken(); ok {
		_spec.SetField(oauthtoken.FieldAccessToken, field.TypeString, value)
	}
	if otuo.mutation.AccessTokenCleared() {
		_spec.ClearField(oauthtoken.FieldAccessToken, field.TypeString)
	}
	if value, ok := otuo.mutation.RefreshToken(); ok {
		_spec.SetField(oauthtoken.FieldRefreshToken, field.TypeString, value)
	}
	if otuo.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthtoken.FieldRefreshToken, field.TypeString)
	}
	if value, ok := otuo.mutation.Expiry(); ok {
		_spec.SetField(oauthtoken.FieldExpiry, field.TypeTime, value)
	}
	if otuo.mutation.ExpiryCleared() {
		_spec.ClearField(oauthtoken.FieldExpiry, field.TypeTime)
	}
	if otuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OAuthToken{config: otuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, otuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	otuo.mutation.done = true
	return _node, nil
}
