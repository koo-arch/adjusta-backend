// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/koo-arch/adjusta-backend/ent"
	"github.com/koo-arch/adjusta-backend/ent/calendar"
	"github.com/koo-arch/adjusta-backend/ent/event"
	"github.com/koo-arch/adjusta-backend/ent/googlecalendarinfo"
	"github.com/koo-arch/adjusta-backend/ent/jwtkey"
	"github.com/koo-arch/adjusta-backend/ent/oauthtoken"
	"github.com/koo-arch/adjusta-backend/ent/predicate"
	"github.com/koo-arch/adjusta-backend/ent/proposeddate"
	"github.com/koo-arch/adjusta-backend/ent/user"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The CalendarFunc type is an adapter to allow the use of ordinary function as a Querier.
type CalendarFunc func(context.Context, *ent.CalendarQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CalendarFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CalendarQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CalendarQuery", q)
}

// The TraverseCalendar type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCalendar func(context.Context, *ent.CalendarQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCalendar) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCalendar) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CalendarQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CalendarQuery", q)
}

// The EventFunc type is an adapter to allow the use of ordinary function as a Querier.
type EventFunc func(context.Context, *ent.EventQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EventFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EventQuery", q)
}

// The TraverseEvent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEvent func(context.Context, *ent.EventQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEvent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEvent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EventQuery", q)
}

// The GoogleCalendarInfoFunc type is an adapter to allow the use of ordinary function as a Querier.
type GoogleCalendarInfoFunc func(context.Context, *ent.GoogleCalendarInfoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f GoogleCalendarInfoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.GoogleCalendarInfoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.GoogleCalendarInfoQuery", q)
}

// The TraverseGoogleCalendarInfo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGoogleCalendarInfo func(context.Context, *ent.GoogleCalendarInfoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGoogleCalendarInfo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGoogleCalendarInfo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GoogleCalendarInfoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.GoogleCalendarInfoQuery", q)
}

// The JWTKeyFunc type is an adapter to allow the use of ordinary function as a Querier.
type JWTKeyFunc func(context.Context, *ent.JWTKeyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f JWTKeyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.JWTKeyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.JWTKeyQuery", q)
}

// The TraverseJWTKey type is an adapter to allow the use of ordinary function as Traverser.
type TraverseJWTKey func(context.Context, *ent.JWTKeyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseJWTKey) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseJWTKey) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.JWTKeyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.JWTKeyQuery", q)
}

// The OAuthTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type OAuthTokenFunc func(context.Context, *ent.OAuthTokenQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OAuthTokenFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OAuthTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OAuthTokenQuery", q)
}

// The TraverseOAuthToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOAuthToken func(context.Context, *ent.OAuthTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOAuthToken) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOAuthToken) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OAuthTokenQuery", q)
}

// The ProposedDateFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProposedDateFunc func(context.Context, *ent.ProposedDateQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProposedDateFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProposedDateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProposedDateQuery", q)
}

// The TraverseProposedDate type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProposedDate func(context.Context, *ent.ProposedDateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProposedDate) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProposedDate) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProposedDateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProposedDateQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.CalendarQuery:
		return &query[*ent.CalendarQuery, predicate.Calendar, calendar.OrderOption]{typ: ent.TypeCalendar, tq: q}, nil
	case *ent.EventQuery:
		return &query[*ent.EventQuery, predicate.Event, event.OrderOption]{typ: ent.TypeEvent, tq: q}, nil
	case *ent.GoogleCalendarInfoQuery:
		return &query[*ent.GoogleCalendarInfoQuery, predicate.GoogleCalendarInfo, googlecalendarinfo.OrderOption]{typ: ent.TypeGoogleCalendarInfo, tq: q}, nil
	case *ent.JWTKeyQuery:
		return &query[*ent.JWTKeyQuery, predicate.JWTKey, jwtkey.OrderOption]{typ: ent.TypeJWTKey, tq: q}, nil
	case *ent.OAuthTokenQuery:
		return &query[*ent.OAuthTokenQuery, predicate.OAuthToken, oauthtoken.OrderOption]{typ: ent.TypeOAuthToken, tq: q}, nil
	case *ent.ProposedDateQuery:
		return &query[*ent.ProposedDateQuery, predicate.ProposedDate, proposeddate.OrderOption]{typ: ent.TypeProposedDate, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
