// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/adjusta-backend/ent/jwtkey"
)

// JWTKeyCreate is the builder for creating a JWTKey entity.
type JWTKeyCreate struct {
	config
	mutation *JWTKeyMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (jkc *JWTKeyCreate) SetKey(s string) *JWTKeyCreate {
	jkc.mutation.SetKey(s)
	return jkc
}

// SetType sets the "type" field.
func (jkc *JWTKeyCreate) SetType(s string) *JWTKeyCreate {
	jkc.mutation.SetType(s)
	return jkc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (jkc *JWTKeyCreate) SetNillableType(s *string) *JWTKeyCreate {
	if s != nil {
		jkc.SetType(*s)
	}
	return jkc
}

// SetCreatedAt sets the "created_at" field.
func (jkc *JWTKeyCreate) SetCreatedAt(t time.Time) *JWTKeyCreate {
	jkc.mutation.SetCreatedAt(t)
	return jkc
}

// SetExpiresAt sets the "expires_at" field.
func (jkc *JWTKeyCreate) SetExpiresAt(t time.Time) *JWTKeyCreate {
	jkc.mutation.SetExpiresAt(t)
	return jkc
}

// Mutation returns the JWTKeyMutation object of the builder.
func (jkc *JWTKeyCreate) Mutation() *JWTKeyMutation {
	return jkc.mutation
}

// Save creates the JWTKey in the database.
func (jkc *JWTKeyCreate) Save(ctx context.Context) (*JWTKey, error) {
	jkc.defaults()
	return withHooks(ctx, jkc.sqlSave, jkc.mutation, jkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jkc *JWTKeyCreate) SaveX(ctx context.Context) *JWTKey {
	v, err := jkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jkc *JWTKeyCreate) Exec(ctx context.Context) error {
	_, err := jkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jkc *JWTKeyCreate) ExecX(ctx context.Context) {
	if err := jkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jkc *JWTKeyCreate) defaults() {
	if _, ok := jkc.mutation.GetType(); !ok {
		v := jwtkey.DefaultType
		jkc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jkc *JWTKeyCreate) check() error {
	if _, ok := jkc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "JWTKey.key"`)}
	}
	if v, ok := jkc.mutation.Key(); ok {
		if err := jwtkey.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "JWTKey.key": %w`, err)}
		}
	}
	if _, ok := jkc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "JWTKey.type"`)}
	}
	if v, ok := jkc.mutation.GetType(); ok {
		if err := jwtkey.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "JWTKey.type": %w`, err)}
		}
	}
	if _, ok := jkc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JWTKey.created_at"`)}
	}
	if _, ok := jkc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "JWTKey.expires_at"`)}
	}
	return nil
}

func (jkc *JWTKeyCreate) sqlSave(ctx context.Context) (*JWTKey, error) {
	if err := jkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jkc.mutation.id = &_node.ID
	jkc.mutation.done = true
	return _node, nil
}

func (jkc *JWTKeyCreate) createSpec() (*JWTKey, *sqlgraph.CreateSpec) {
	var (
		_node = &JWTKey{config: jkc.config}
		_spec = sqlgraph.NewCreateSpec(jwtkey.Table, sqlgraph.NewFieldSpec(jwtkey.FieldID, field.TypeInt))
	)
	if value, ok := jkc.mutation.Key(); ok {
		_spec.SetField(jwtkey.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := jkc.mutation.GetType(); ok {
		_spec.SetField(jwtkey.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := jkc.mutation.CreatedAt(); ok {
		_spec.SetField(jwtkey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jkc.mutation.ExpiresAt(); ok {
		_spec.SetField(jwtkey.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	return _node, _spec
}

// JWTKeyCreateBulk is the builder for creating many JWTKey entities in bulk.
type JWTKeyCreateBulk struct {
	config
	err      error
	builders []*JWTKeyCreate
}

// Save creates the JWTKey entities in the database.
func (jkcb *JWTKeyCreateBulk) Save(ctx context.Context) ([]*JWTKey, error) {
	if jkcb.err != nil {
		return nil, jkcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jkcb.builders))
	nodes := make([]*JWTKey, len(jkcb.builders))
	mutators := make([]Mutator, len(jkcb.builders))
	for i := range jkcb.builders {
		func(i int, root context.Context) {
			builder := jkcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JWTKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jkcb *JWTKeyCreateBulk) SaveX(ctx context.Context) []*JWTKey {
	v, err := jkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jkcb *JWTKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := jkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jkcb *JWTKeyCreateBulk) ExecX(ctx context.Context) {
	if err := jkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
