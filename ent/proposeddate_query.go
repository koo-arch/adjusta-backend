// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/event"
	"github.com/koo-arch/adjusta-backend/ent/predicate"
	"github.com/koo-arch/adjusta-backend/ent/proposeddate"
)

// ProposedDateQuery is the builder for querying ProposedDate entities.
type ProposedDateQuery struct {
	config
	ctx        *QueryContext
	order      []proposeddate.OrderOption
	inters     []Interceptor
	predicates []predicate.ProposedDate
	withEvent  *EventQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProposedDateQuery builder.
func (pdq *ProposedDateQuery) Where(ps ...predicate.ProposedDate) *ProposedDateQuery {
	pdq.predicates = append(pdq.predicates, ps...)
	return pdq
}

// Limit the number of records to be returned by this query.
func (pdq *ProposedDateQuery) Limit(limit int) *ProposedDateQuery {
	pdq.ctx.Limit = &limit
	return pdq
}

// Offset to start from.
func (pdq *ProposedDateQuery) Offset(offset int) *ProposedDateQuery {
	pdq.ctx.Offset = &offset
	return pdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pdq *ProposedDateQuery) Unique(unique bool) *ProposedDateQuery {
	pdq.ctx.Unique = &unique
	return pdq
}

// Order specifies how the records should be ordered.
func (pdq *ProposedDateQuery) Order(o ...proposeddate.OrderOption) *ProposedDateQuery {
	pdq.order = append(pdq.order, o...)
	return pdq
}

// QueryEvent chains the current query on the "event" edge.
func (pdq *ProposedDateQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: pdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(proposeddate.Table, proposeddate.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proposeddate.EventTable, proposeddate.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(pdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProposedDate entity from the query.
// Returns a *NotFoundError when no ProposedDate was found.
func (pdq *ProposedDateQuery) First(ctx context.Context) (*ProposedDate, error) {
	nodes, err := pdq.Limit(1).All(setContextOp(ctx, pdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{proposeddate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pdq *ProposedDateQuery) FirstX(ctx context.Context) *ProposedDate {
	node, err := pdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProposedDate ID from the query.
// Returns a *NotFoundError when no ProposedDate ID was found.
func (pdq *ProposedDateQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pdq.Limit(1).IDs(setContextOp(ctx, pdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{proposeddate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pdq *ProposedDateQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProposedDate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProposedDate entity is found.
// Returns a *NotFoundError when no ProposedDate entities are found.
func (pdq *ProposedDateQuery) Only(ctx context.Context) (*ProposedDate, error) {
	nodes, err := pdq.Limit(2).All(setContextOp(ctx, pdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{proposeddate.Label}
	default:
		return nil, &NotSingularError{proposeddate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pdq *ProposedDateQuery) OnlyX(ctx context.Context) *ProposedDate {
	node, err := pdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProposedDate ID in the query.
// Returns a *NotSingularError when more than one ProposedDate ID is found.
// Returns a *NotFoundError when no entities are found.
func (pdq *ProposedDateQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pdq.Limit(2).IDs(setContextOp(ctx, pdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{proposeddate.Label}
	default:
		err = &NotSingularError{proposeddate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pdq *ProposedDateQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProposedDates.
func (pdq *ProposedDateQuery) All(ctx context.Context) ([]*ProposedDate, error) {
	ctx = setContextOp(ctx, pdq.ctx, "All")
	if err := pdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProposedDate, *ProposedDateQuery]()
	return withInterceptors[[]*ProposedDate](ctx, pdq, qr, pdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pdq *ProposedDateQuery) AllX(ctx context.Context) []*ProposedDate {
	nodes, err := pdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProposedDate IDs.
func (pdq *ProposedDateQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pdq.ctx.Unique == nil && pdq.path != nil {
		pdq.Unique(true)
	}
	ctx = setContextOp(ctx, pdq.ctx, "IDs")
	if err = pdq.Select(proposeddate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pdq *ProposedDateQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pdq *ProposedDateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pdq.ctx, "Count")
	if err := pdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pdq, querierCount[*ProposedDateQuery](), pdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pdq *ProposedDateQuery) CountX(ctx context.Context) int {
	count, err := pdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pdq *ProposedDateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pdq.ctx, "Exist")
	switch _, err := pdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pdq *ProposedDateQuery) ExistX(ctx context.Context) bool {
	exist, err := pdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProposedDateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pdq *ProposedDateQuery) Clone() *ProposedDateQuery {
	if pdq == nil {
		return nil
	}
	return &ProposedDateQuery{
		config:     pdq.config,
		ctx:        pdq.ctx.Clone(),
		order:      append([]proposeddate.OrderOption{}, pdq.order...),
		inters:     append([]Interceptor{}, pdq.inters...),
		predicates: append([]predicate.ProposedDate{}, pdq.predicates...),
		withEvent:  pdq.withEvent.Clone(),
		// clone intermediate query.
		sql:  pdq.sql.Clone(),
		path: pdq.path,
	}
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (pdq *ProposedDateQuery) WithEvent(opts ...func(*EventQuery)) *ProposedDateQuery {
	query := (&EventClient{config: pdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pdq.withEvent = query
	return pdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StartTime time.Time `json:"start_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProposedDate.Query().
//		GroupBy(proposeddate.FieldStartTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pdq *ProposedDateQuery) GroupBy(field string, fields ...string) *ProposedDateGroupBy {
	pdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProposedDateGroupBy{build: pdq}
	grbuild.flds = &pdq.ctx.Fields
	grbuild.label = proposeddate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StartTime time.Time `json:"start_time,omitempty"`
//	}
//
//	client.ProposedDate.Query().
//		Select(proposeddate.FieldStartTime).
//		Scan(ctx, &v)
func (pdq *ProposedDateQuery) Select(fields ...string) *ProposedDateSelect {
	pdq.ctx.Fields = append(pdq.ctx.Fields, fields...)
	sbuild := &ProposedDateSelect{ProposedDateQuery: pdq}
	sbuild.label = proposeddate.Label
	sbuild.flds, sbuild.scan = &pdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProposedDateSelect configured with the given aggregations.
func (pdq *ProposedDateQuery) Aggregate(fns ...AggregateFunc) *ProposedDateSelect {
	return pdq.Select().Aggregate(fns...)
}

func (pdq *ProposedDateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pdq); err != nil {
				return err
			}
		}
	}
	for _, f := range pdq.ctx.Fields {
		if !proposeddate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pdq.path != nil {
		prev, err := pdq.path(ctx)
		if err != nil {
			return err
		}
		pdq.sql = prev
	}
	return nil
}

func (pdq *ProposedDateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProposedDate, error) {
	var (
		nodes       = []*ProposedDate{}
		withFKs     = pdq.withFKs
		_spec       = pdq.querySpec()
		loadedTypes = [1]bool{
			pdq.withEvent != nil,
		}
	)
	if pdq.withEvent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, proposeddate.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProposedDate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProposedDate{config: pdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pdq.withEvent; query != nil {
		if err := pdq.loadEvent(ctx, query, nodes, nil,
			func(n *ProposedDate, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pdq *ProposedDateQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*ProposedDate, init func(*ProposedDate), assign func(*ProposedDate, *Event)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProposedDate)
	for i := range nodes {
		if nodes[i].event_proposed_dates == nil {
			continue
		}
		fk := *nodes[i].event_proposed_dates
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(event.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_proposed_dates" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pdq *ProposedDateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pdq.querySpec()
	_spec.Node.Columns = pdq.ctx.Fields
	if len(pdq.ctx.Fields) > 0 {
		_spec.Unique = pdq.ctx.Unique != nil && *pdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pdq.driver, _spec)
}

func (pdq *ProposedDateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(proposeddate.Table, proposeddate.Columns, sqlgraph.NewFieldSpec(proposeddate.FieldID, field.TypeUUID))
	_spec.From = pdq.sql
	if unique := pdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pdq.path != nil {
		_spec.Unique = true
	}
	if fields := pdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proposeddate.FieldID)
		for i := range fields {
			if fields[i] != proposeddate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pdq *ProposedDateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pdq.driver.Dialect())
	t1 := builder.Table(proposeddate.Table)
	columns := pdq.ctx.Fields
	if len(columns) == 0 {
		columns = proposeddate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pdq.sql != nil {
		selector = pdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pdq.ctx.Unique != nil && *pdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pdq.predicates {
		p(selector)
	}
	for _, p := range pdq.order {
		p(selector)
	}
	if offset := pdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProposedDateGroupBy is the group-by builder for ProposedDate entities.
type ProposedDateGroupBy struct {
	selector
	build *ProposedDateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pdgb *ProposedDateGroupBy) Aggregate(fns ...AggregateFunc) *ProposedDateGroupBy {
	pdgb.fns = append(pdgb.fns, fns...)
	return pdgb
}

// Scan applies the selector query and scans the result into the given value.
func (pdgb *ProposedDateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pdgb.build.ctx, "GroupBy")
	if err := pdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProposedDateQuery, *ProposedDateGroupBy](ctx, pdgb.build, pdgb, pdgb.build.inters, v)
}

func (pdgb *ProposedDateGroupBy) sqlScan(ctx context.Context, root *ProposedDateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pdgb.fns))
	for _, fn := range pdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pdgb.flds)+len(pdgb.fns))
		for _, f := range *pdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProposedDateSelect is the builder for selecting fields of ProposedDate entities.
type ProposedDateSelect struct {
	*ProposedDateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pds *ProposedDateSelect) Aggregate(fns ...AggregateFunc) *ProposedDateSelect {
	pds.fns = append(pds.fns, fns...)
	return pds
}

// Scan applies the selector query and scans the result into the given value.
func (pds *ProposedDateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pds.ctx, "Select")
	if err := pds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProposedDateQuery, *ProposedDateSelect](ctx, pds.ProposedDateQuery, pds, pds.inters, v)
}

func (pds *ProposedDateSelect) sqlScan(ctx context.Context, root *ProposedDateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pds.fns))
	for _, fn := range pds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
