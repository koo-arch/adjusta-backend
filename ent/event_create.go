// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/koo-arch/adjusta-backend/ent/calendar"
	"github.com/koo-arch/adjusta-backend/ent/event"
	"github.com/koo-arch/adjusta-backend/ent/proposeddate"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ec *EventCreate) SetCreatedAt(t time.Time) *EventCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EventCreate) SetUpdatedAt(t time.Time) *EventCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableUpdatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EventCreate) SetDeletedAt(t time.Time) *EventCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableDeletedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetSummary sets the "summary" field.
func (ec *EventCreate) SetSummary(s string) *EventCreate {
	ec.mutation.SetSummary(s)
	return ec
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (ec *EventCreate) SetNillableSummary(s *string) *EventCreate {
	if s != nil {
		ec.SetSummary(*s)
	}
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EventCreate) SetNillableDescription(s *string) *EventCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetLocation sets the "location" field.
func (ec *EventCreate) SetLocation(s string) *EventCreate {
	ec.mutation.SetLocation(s)
	return ec
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocation(s *string) *EventCreate {
	if s != nil {
		ec.SetLocation(*s)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EventCreate) SetStatus(e event.Status) *EventCreate {
	ec.mutation.SetStatus(e)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EventCreate) SetNillableStatus(e *event.Status) *EventCreate {
	if e != nil {
		ec.SetStatus(*e)
	}
	return ec
}

// SetConfirmedDateID sets the "confirmed_date_id" field.
func (ec *EventCreate) SetConfirmedDateID(u uuid.UUID) *EventCreate {
	ec.mutation.SetConfirmedDateID(u)
	return ec
}

// SetNillableConfirmedDateID sets the "confirmed_date_id" field if the given value is not nil.
func (ec *EventCreate) SetNillableConfirmedDateID(u *uuid.UUID) *EventCreate {
	if u != nil {
		ec.SetConfirmedDateID(*u)
	}
	return ec
}

// SetGoogleEventID sets the "google_event_id" field.
func (ec *EventCreate) SetGoogleEventID(s string) *EventCreate {
	ec.mutation.SetGoogleEventID(s)
	return ec
}

// SetNillableGoogleEventID sets the "google_event_id" field if the given value is not nil.
func (ec *EventCreate) SetNillableGoogleEventID(s *string) *EventCreate {
	if s != nil {
		ec.SetGoogleEventID(*s)
	}
	return ec
}

// SetSlug sets the "slug" field.
func (ec *EventCreate) SetSlug(s string) *EventCreate {
	ec.mutation.SetSlug(s)
	return ec
}

// SetID sets the "id" field.
func (ec *EventCreate) SetID(u uuid.UUID) *EventCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EventCreate) SetNillableID(u *uuid.UUID) *EventCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// SetCalendarID sets the "calendar" edge to the Calendar entity by ID.
func (ec *EventCreate) SetCalendarID(id uuid.UUID) *EventCreate {
	ec.mutation.SetCalendarID(id)
	return ec
}

// SetNillableCalendarID sets the "calendar" edge to the Calendar entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableCalendarID(id *uuid.UUID) *EventCreate {
	if id != nil {
		ec = ec.SetCalendarID(*id)
	}
	return ec
}

// SetCalendar sets the "calendar" edge to the Calendar entity.
func (ec *EventCreate) SetCalendar(c *Calendar) *EventCreate {
	return ec.SetCalendarID(c.ID)
}

// AddProposedDateIDs adds the "proposed_dates" edge to the ProposedDate entity by IDs.
func (ec *EventCreate) AddProposedDateIDs(ids ...uuid.UUID) *EventCreate {
	ec.mutation.AddProposedDateIDs(ids...)
	return ec
}

// AddProposedDates adds the "proposed_dates" edges to the ProposedDate entity.
func (ec *EventCreate) AddProposedDates(p ...*ProposedDate) *EventCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddProposedDateIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	if err := ec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		if event.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := event.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		if event.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := event.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := event.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		if event.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized event.DefaultID (forgotten import ent/runtime?)")
		}
		v := event.DefaultID()
		ec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Event.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Event.updated_at"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Event.status"`)}
	}
	if v, ok := ec.mutation.Status(); ok {
		if err := event.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Event.status": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Event.slug"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Summary(); ok {
		_spec.SetField(event.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.ConfirmedDateID(); ok {
		_spec.SetField(event.FieldConfirmedDateID, field.TypeUUID, value)
		_node.ConfirmedDateID = value
	}
	if value, ok := ec.mutation.GoogleEventID(); ok {
		_spec.SetField(event.FieldGoogleEventID, field.TypeString, value)
		_node.GoogleEventID = value
	}
	if value, ok := ec.mutation.Slug(); ok {
		_spec.SetField(event.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if nodes := ec.mutation.CalendarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CalendarTable,
			Columns: []string{event.CalendarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calendar.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.calendar_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ProposedDatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ProposedDatesTable,
			Columns: []string{event.ProposedDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proposeddate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
